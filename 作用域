作用域
域表示的就是 范围, 即 作用范围. 就是一个名字在什么地方可以被使用, 什么时候不能使用.

1块级作用域

即块级别的作用范围

    // 在 C , Java 等编程语言中, 下面的语法报错
    {
        var num = 123;  // int 
        {
            console.log( num ); // => 123
        }
    }
    console.log( num ); // 报错
2在 js 中采用词法作用域

所谓的 词法( 代码 )作用域, 就是代码在编写过程中体现出来的作用范围. 代码一旦写好, 不用执行,
作用范围就已经确定好了. 这个就是所谓词法作用域.

在 js 中词法作用域规则:

1函数允许访问函数外的数据.
2整个代码结构中只有函数可以限定作用域.
3作用规则首先使用提升规则分析
4如果当前作用规则中有名字了, 就不考虑外面的名字

作用域链

可以发现只有函数可以制造作用域结构. 那么只要是代码, 至少有一个作用域, 即全局作用域.
凡是代码中有函数, 那么这个函数就构成另一个作用域. 如果函数中还有函数, 那么再这个作用域中就
又可以诞生一个作用域. 那么将这样的所有的作用域列出来, 可以有一个结构: 函数内指向函数外的链式结构.

绘制作用域链的步骤:

1看整个全局是一条链, 即顶级链, 记为 0 级链
2看全局作用域中, 有什么成员声明, 就以方格的形式绘制到 0 级练上
3再找函数, 只有函数可以限制作用域, 因此从函数中引入新链, 标记为 1 级链
4然后在每一个 1 级链中再次往复刚才的行为

变量的访问规则

1首先看变量在第几条链上, 在该链上看是否有变量的定义与赋值, 如果有直接使用
2如果没有到上一级链上找( n - 1 级链 ), 如果有直接用, 停止继续查找.
3如果还没有再次往上刚找... 直到全局链( 0 级 ), 还没有就是 is not defined
4注意, 切记 同级的链不可混合查找
如何分析代码

在分析代码的时候切记从代码的运行进度上来分析, 如果代码给变量赋值了, 一定要标记到图中
如果代码比较复杂, 可以在图中描述代码的内容, 有事甚至需要将原型图与作用域图合并分析
