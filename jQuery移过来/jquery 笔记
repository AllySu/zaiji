.attr()与.removeAttr()

append()与appendTo()，插入的内容做为点击ID的子元素。之后

prepend()与prependTo() 插入的内容做为点击ID的子元素。之前

after()与before()，插入的内容做为点击ID的子元素，假设ID已经有子元素，插入的内容与ID的原有子元素并列。before在子元素前，

after在子元素后。继续点击，内容一直是紧挨着初始的子元素

insertAfter()与insertBefore() =》 after()与before()


empty(可以带有过滤参数，指定删谁)移除子元素（和其他后代元素），同时移除元素里的文本。

remove()会将元素自身移除，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的jQuery数据。

detach()保存事件和数据在内存中。

clone()克隆节点，有true时，节点、事件一起克隆



.replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合

.wrap( wrappingElement )：在集合中匹配的每个元素周围包裹一个HTML结构

.wrap( function ) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象



通过wrap方法给选中元素增加一个包裹的父元素。相反，如果删除选中元素的父元素要如何处理 ?    unwrap()方法


.wrapAll( wrappingElement )：给集合中匹配的元素增加一个外面包裹HTML结构。

<p>p元素</p>
<p>p元素</p>
给所有p元素增加一个div包裹

$('p').wrapAll('<div></div>')


.wrapAll( function ) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象


$('p').wrapAll(function() {
    return '<div><div/>'; 
})
以上的写法的结果如下，等同于warp的处理了

<div>
    <p>p元素</p>
</div>
<div>
    <p>p元素</p>
</div>


.wrapInner( wrappingElement )：给集合中匹配的元素的内部，增加包裹的HTML结构


<div>p元素</div>
<div>p元素</div>
给所有元素增加一个p包裹

$('div').wrapInner('<p></p>')
最后的结构，匹配的di元素的内部元素被p给包裹了

<div>
    <p>p元素</p>
</div>
<div>
    <p>p元素</p>
</div>



children()方法
仅儿子辈，这里可以理解为就是父亲-儿子的关系

find（）
children与find方法的区别，children是父子关系查找，find是后代关系（包含父子关系）


.find()方法要注意的知识点：

1find是遍历当前元素集合中每个元素的后代。只要符合，不管是儿子辈，孙子辈都可以。

2与其他的树遍历方法不同，选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所3有后代元素的取回，可以传递通配选择器 '*'。

4find只在后代中遍历，不包括自己。

5选择器 context 是由 .find() 方法实现的；因此，$('.item-ii').find('li') 等价于 $('li', '.item-ii')(找到类名为item-ii的标签下的li标签)。

parent()方法
因为是父元素，这个方法只会向上查找一级


parents()方法
其实也类似find与children的区别，parent只会查找一级，parents则会往上一直查到查找到祖先节点




parents()和.closest()是有点相似的，都是往上遍历祖辈元素，但是两者还是有区别的，否则就没有存在的意义了

起始位置不同：.closest开始于当前元素 .parents开始于父元素
遍历的目标不同：.closest要找到指定的目标，.parents遍历到文档根元素，closest向上查找，直到找到一个匹配的就停止查找，parents一直查
找到根元素，并将匹配的元素加入集合
结果不同：.closest返回的是包含零个或一个元素的jquery对象，parents返回的是包含零个或一个或多个元素的jquery对象


next()方法  下一个     prev()方法  前一个

并列关系（比如很对li元素）

siblings()  兄弟关系



操作：选择所有的li元素，之后把p元素也加入到li的合集中

<ul>
    <li>list item 1</li>
    <li>list item 3</li>
</ul>
<p>新的p元素</p>
处理一：传递选择器

$('li').add('p')
处理二：传递dom元素

$('li').add(document.getElementsByTagName('p')[0])


遍历each()
